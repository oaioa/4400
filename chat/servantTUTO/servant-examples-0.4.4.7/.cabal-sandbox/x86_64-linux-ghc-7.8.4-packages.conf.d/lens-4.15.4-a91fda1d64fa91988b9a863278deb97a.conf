name: lens
version: 4.15.4
id: lens-4.15.4-a91fda1d64fa91988b9a863278deb97a
license: BSD2
copyright: Copyright (C) 2012-2016 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/ALlbPRa.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Coerce Control.Lens.Internal.Context
                 Control.Lens.Internal.CTypes Control.Lens.Internal.Deque
                 Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
                 Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
                 Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
                 Control.Lens.Internal.Instances Control.Lens.Internal.Iso
                 Control.Lens.Internal.Level Control.Lens.Internal.List
                 Control.Lens.Internal.Magma Control.Lens.Internal.Prism
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
                 Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
                 Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
                 Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
                 Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
                 Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
                 Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
                 GHC.Generics.Lens System.Exit.Lens System.FilePath.Lens
                 System.IO.Error.Lens Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/boss/CODE/haskell/4400/chat/servantTUTO/servant-examples-0.4.4.7/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/lens-4.15.4
library-dirs: /home/boss/CODE/haskell/4400/chat/servantTUTO/servant-examples-0.4.4.7/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/lens-4.15.4
hs-libraries: HSlens-4.15.4
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-470385a50d2b78598af85cfe9d988e1b
         base-4.7.0.2-bfd89587617e381ae01b8dd7b6c7f1c1
         base-orphans-0.6-a522e45bdc3d5bffad5c9b1fdd4ecee6
         bifunctors-5.4.2-eaa8186652d796fc52ae7f300e306ef2
         bytestring-0.10.4.0-d6f1d17d717e8652498cab8269a0acd5
         call-stack-0.1.0-9a8c77a788fb66fe4d948824123f7a52
         comonad-5.0.2-f693c524c5ff3c5475533773333f4bac
         containers-0.5.5.1-d4bd887fb97aa3a46cbadc13709b7653
         contravariant-1.4-d1ffafe2bc4e70a2ed2ccaa637a0b1a2
         distributive-0.5.3-ffd96cc1bdf2711a450b7e92ba152501
         exceptions-0.8.3-9faebfa22256ed5ccb2b8e30b859e6c4
         filepath-1.3.0.2-25a474a9272ae6260626ce0d70ad1cab
         free-4.12.4-5a525b81feb5c009d3caadb181eae71c
         generic-deriving-1.11.2-93fb614c2e6002df67773b11a0da21b6
         ghc-prim-0.3.1.0-a24f9c14c632d75b683d0f93283aea37
         hashable-1.2.6.1-acc09bc3cd0b1233f856262d96fe832a
         kan-extensions-5.0.2-a7b65a86d0b1275d5a3ec1c96c9d961d
         mtl-2.2.1-8c12005da5add6d6822cd8e7586fde6d
         parallel-3.2.1.1-2d94fb2ba5888f860eef4069ebae3355
         profunctors-5.2.1-4c94626bca72cd8667929df32bb8670a
         reflection-2.1.2-aadbd062b12561d05d5cc1fdf3f3801b
         semigroupoids-5.2.1-2d160b1f6affacb490997e2b18d8f0a7
         semigroups-0.18.3-045e1029ac749cca119a8e6f71fd1264
         tagged-0.8.5-10d02f69ddcac6dd904b24acdbe30d73
         template-haskell-2.9.0.0-6d27c2b362b15abb1822f2f34b9ae7f9
         text-1.2.2.2-9fd856bc626ceedfaf75bf7821dd92cd
         th-abstraction-0.2.6.0-517f3d838d2b0abc463e6091a6a54b42
         transformers-0.4.3.0-f18252835bb81403684b82642c2d19e8
         transformers-compat-0.5.1.4-2a653aa689d22ab00f679950e80f5c1b
         unordered-containers-0.2.8.0-a07e6e635b9ed5f852722b4a279a895a
         vector-0.12.0.1-205ed47d27cda52fc155e2c4eacaab6d
         void-0.7.2-d0717b970036aa2a5c66aaec3f6d3906
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/boss/CODE/haskell/4400/chat/servantTUTO/servant-examples-0.4.4.7/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/lens-4.15.4/html/lens.haddock
haddock-html: /home/boss/CODE/haskell/4400/chat/servantTUTO/servant-examples-0.4.4.7/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/lens-4.15.4/html
