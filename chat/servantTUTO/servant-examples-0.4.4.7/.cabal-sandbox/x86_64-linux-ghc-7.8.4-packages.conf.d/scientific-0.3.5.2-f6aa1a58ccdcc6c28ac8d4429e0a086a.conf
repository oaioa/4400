name: scientific
version: 0.3.5.2
id: scientific-0.3.5.2-f6aa1a58ccdcc6c28ac8d4429e0a086a
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
             arbitrary precision and space efficient. They are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
             The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
             @e :: 'Int'@. A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             Note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision. I intend to change the type of the exponent
             to 'Integer' in a future release.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.ByteString.Builder.Scientific Data.Scientific
                 Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
trusted: False
import-dirs: /home/boss/CODE/haskell/4400/chat/servantTUTO/servant-examples-0.4.4.7/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/scientific-0.3.5.2
library-dirs: /home/boss/CODE/haskell/4400/chat/servantTUTO/servant-examples-0.4.4.7/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/scientific-0.3.5.2
hs-libraries: HSscientific-0.3.5.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.7.0.2-bfd89587617e381ae01b8dd7b6c7f1c1
         binary-0.7.1.0-f867dbbb69966feb9f5c4ef7695a70a5
         bytestring-0.10.4.0-d6f1d17d717e8652498cab8269a0acd5
         containers-0.5.5.1-d4bd887fb97aa3a46cbadc13709b7653
         deepseq-1.3.0.2-63a1ab91b7017a28bb5d04cb1b5d2d02
         hashable-1.2.6.1-acc09bc3cd0b1233f856262d96fe832a
         integer-gmp-0.5.1.0-26579559b3647acf4f01d5edd9491a46
         integer-logarithms-1.0.2-a155e1533adbbffbac317ea0fecdd37a
         primitive-0.6.2.0-679c51e933dfcb43241d96a4178d3c1c
         text-1.2.2.2-9fd856bc626ceedfaf75bf7821dd92cd
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/boss/CODE/haskell/4400/chat/servantTUTO/servant-examples-0.4.4.7/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/scientific-0.3.5.2/html/scientific.haddock
haddock-html: /home/boss/CODE/haskell/4400/chat/servantTUTO/servant-examples-0.4.4.7/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/scientific-0.3.5.2/html
